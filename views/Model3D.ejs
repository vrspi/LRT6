<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- <link rel="stylesheet" href="/css/style.css"> -->

    <!-- <link rel="stylesheet" href="/css/style.css"> -->

    <title><%= title %></title>
    
    <link rel="shortcut icon" href="/images/logo-dark.png" type="image/x-icon" />
    <style>
        *{
            padding: 0px;
            margin: 0px;
            box-sizing: border-box;
        }

        body { margin: 0; }
        canvas { width: 100%; height: 100% ; vertical-align:bottom}

        .controls{position: absolute; padding: 1%;width: 20%; margin:2% ;height: 450px; display: flex; flex-direction: column;justify-content: center;align-items: center;gap: 10px}

        .button_div{width: 100%;height: 10%;}
        .button1{border: 2px solid rgb(255, 255, 255);width:60%;height: 100%; color: white;background-color: black;}
        .button1:hover{border: 2px solid rgb(0, 0, 0); color:rgb(0, 0, 0);background-color: rgb(255, 255, 255);}
        

        .control1{width: 100%; display: flex; flex-direction: column;justify-content: center;align-items: center;}
        .division{width: 100%;display: flex; justify-content: center;align-items: center;}
        .division1{width: 80%;height: 100%;padding: 3px;border: 1px solid rgb(255, 255, 255);}
        .division2{width: 20%;height: 100%;border: 1px solid rgb(255, 255, 255);display: flex;justify-content: center;align-items: center;}
        .text{
            font-size: 13px;
            padding-left: 20px;
            font-weight: 800;
            color: white;
        }
        .button_off{
            width: 90%;
            border-radius: 3px;
            height: 30px;
            background-color: white;
            color: black;
        }
        .button_off:hover{
            background-color: rgb(0, 0, 0);
            color: rgb(255, 255, 255);
        }
        .control2{
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .select
        {
            width: 35%;
            background-color: black;
            border: 2px solid rgb(255, 255, 255);
            height: 100%;
            color: white;
        }

        

        
    </style>
</head>
<body id="bod" style="margin: 0;">
    <div class="controls">


        <div class="button_div">
            <button class="button1">Back To Home</button>
        </div>


        <div class="control1">
            <div class="division">
                <div class="division1">
                    <p class="text"> World Axes</p>
                    <p class="text"> x-axis : <span style="color: orange;">Orange</span></p>
                    <p class="text"> y-axis : <span style="color: green;">Green</span></p>
                    <p class="text"> z-axis : <span style="color: blue;">Blue</span></p>
                </div>
                <div class="division2">
                    <button class="button_off">off</button>
                </div>
            </div>
            <div class="division">
                <div class="division1">
                    <p class="text">Lattitude && Longitude</p>
                </div>
                <div class="division2">
                    <button class="button_off">off</button>
                </div>
            </div>
            <div class="division">
                <div class="division1">
                    <p class="text">Hight Map</p>
                </div>
                <div class="division2">
                    <button class="button_off">off</button>
                </div>
            </div>
            <div class="division">
                <div class="division1">
                    <p class="text">Apollo Landers</p>
                </div>
                <div class="division2">
                    <button class="button_off">off</button>
                </div>
            </div>
            <div class="division">
                <div class="division1">
                    <p class="text">Seas & Oceans</p>
                </div>
                <div class="division2">
                    <button class="button_off">off</button>
                </div>
            </div>
        </div>



        <div class="control1">
            <div class="division">
                <div class="division1">  
                    <p class="text">Directional Light Intensity <span id="Directional_Light">50</span></p> 
                    <input type="range" min="-400" max="400" value="50" class="slider" id="volume-control">
                </div>
                <div class="division2">
                    <button id="reset_volume_control" class="button_off">reset</button>
                </div>
            </div>
            <div class="division">
                <div class="division1">
                    <p class="text">Ambient Light Intensity <span>3</span></p> 
                    <input type="range" min="0" max="100" value="50" class="slider" id="volume-control">
                </div>
                <div class="division2">
                    <button class="button_off">reset</button>
                </div>
            </div>
        </div>



        <div class="control2">
            <select class="select" name="" id="">
                <option value="">Year</option>
                <option value="1971">1971</option>
                <option value="1972">1972</option>
                <option value="1973">1973</option>
                <option value="1974">1974</option>
                <option value="1975">1975</option>
                <option value="1976">1976</option>
            </select>
            <select  class="select" name="" id="">
                <option value="">Days</option>
                <option value="39">39</option>
                <option value="72">72</option>
                <option value="171">171</option>
                <option value="274">274</option>
            </select>
            <button style="width: 27%;" class="button_off">Apply</button>
        </div>      


        <div class="button_div">
            <button class="button1">View in First Person!</button>
        </div>

        <div>
            <button class="button1" id="retate_button">rotation</button>
        </div>
    </div>


    
    <!-- <h1>Welcome to My App</h1> -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script> -->
    <script type="module">
        
        import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.121.1/build/three.module.js';
        import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

    // Defining variables
    //var textureURL = "images/2k_moon.jpg"; 
    //var displacementURL = "images/MOON_DISPLACEMENT_46K_16BITS_preview.jpg"; 
    //var worldURL = "images/2k_stars_milky_way.jpg";

    var textureURL = "https://s3-us-west-2.amazonaws.com/s.cdpn.io/17271/lroc_color_poles_1k.jpg"; 
    var displacementURL = "https://s3-us-west-2.amazonaws.com/s.cdpn.io/17271/ldem_3_8bit.jpg"; 
    var worldURL = "https://s3-us-west-2.amazonaws.com/s.cdpn.io/17271/hipp8_s.jpg"
    var normalTexture = "images/moonnormal.bmp";
    var overlayTexture = 'path/to/overlay.gif'; // Ensure your server supports GIF loading

    // Convert lat/long to UV coordinates
    var lat = -3.6445; // Your latitude
    var lon = -17.47753; // Your longitude
    var u = (lon + 180) / 360;
    var v = (90 - lat) / 180;
    var scene = new THREE.Scene();
        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;
        var renderer = new THREE.WebGLRenderer();

        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Controls
        var controls = new OrbitControls(camera, renderer.domElement);
    controls.enablePan = false;
    
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);
    
    var geometry = new THREE.SphereGeometry(2,60,60);
    var textureLoader = new THREE.TextureLoader();
    
    // Nested loading of textures to ensure all are loaded before use
    textureLoader.load(textureURL, function(texture) {
    textureLoader.load(displacementURL, function(displacement) {
        textureLoader.load(worldURL, function(worldTexture) {
            textureLoader.load(normalTexture, function(normalTexture) {
                textureLoader.load("images/waves.gif", function(overlayTexture) {
                var material = new THREE.MeshPhongMaterial({
                    color: 0xffffff,
                    map: texture,
                    displacementMap: displacement,
                    displacementScale: 0.06,
                    bumpMap: displacement,
                    bumpScale: 0.04,
                    reflectivity: 0,
                    shininess: 0
                });
    
                var moon = new THREE.Mesh(geometry, material);
                scene.add(moon);
    
                var worldGeometry = new THREE.SphereGeometry(1000,60,60);
                var worldMaterial = new THREE.MeshBasicMaterial({ 
                    color: 0xffffff,
                    map: worldTexture,
                    side: THREE.BackSide
                });
                var world = new THREE.Mesh(worldGeometry, worldMaterial);
                scene.add(world);
    
                const light = new THREE.DirectionalLight(0xFFFFFF, 1);
                light.position.set(-100, 10, 50);
                scene.add(light);
    
                const hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.1);
                hemiLight.color.setHSL(0.6, 1, 0.6);
                hemiLight.groundColor.setHSL(0.095, 1, 0.75);
                hemiLight.position.set(0, 0, 0);
                scene.add(hemiLight);


                const volumeControl = document.getElementById('volume-control');
                const Directional_Light = document.getElementById('Directional_Light');
                
                volumeControl.addEventListener('input', function () {
                    const sliderValue = parseFloat(volumeControl.value);
                    light.position.setX(-100 + sliderValue);
                    Directional_Light.innerText = sliderValue;
                    renderer.render(scene, camera);
                });



            
    
                // moon.rotation.x = 3.1415*0.02;
                // moon.rotation.y = 3.1415*1.54;
    
                // Animate function
                function animate() {
                    requestAnimationFrame(animate);
                    // moon.rotation.y += 0.002;
                    // moon.rotation.x += 0.0001;
                    // world.rotation.y += 0.0001;
                    // world.rotation.x += 0.0005;
                    controls.update();
                    renderer.render(scene, camera);
                }
    
                animate();
    
                function onResize() {
                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(window.innerWidth, window.innerHeight);
                }
    
                window.addEventListener('resize', onResize, false);


                

                function createGrid(material, radius) {
                var grid = new THREE.Group();
                
                // Create latitudes (horizontal lines)
                for (var lat=-80; lat<=80; lat+=10) {
                    var geometry = new THREE.BufferGeometry();
                    var vertices = [];
                    for (var lon=-180; lon<=180; lon+=5) {
                        var radLat = THREE.MathUtils.degToRad(lat);
                        var radLon = THREE.MathUtils.degToRad(lon);
                        var x = radius * Math.cos(radLat) * Math.cos(radLon);
                        var y = radius * Math.cos(radLat) * Math.sin(radLon);
                        var z = radius * Math.sin(radLat);
                        vertices.push(x, y, z);
                    }
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
                    var line = new THREE.Line(geometry, material);
                    grid.add(line);
                }

                // Create longitudes (vertical lines)
                for (var lon=-180; lon<=180; lon+=10) {
                    var geometry = new THREE.BufferGeometry();
                    var vertices = [];
                    for (var lat=-90; lat<=90; lat+=5) {
                        var radLat = THREE.MathUtils.degToRad(lat);
                        var radLon = THREE.MathUtils.degToRad(lon);
                        var x = radius * Math.cos(radLat) * Math.cos(radLon);
                        var y = radius * Math.cos(radLat) * Math.sin(radLon);
                        var z = radius * Math.sin(radLat);
                        vertices.push(x, y, z);
                    }
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
                    var line = new THREE.Line(geometry, material);
                    grid.add(line);
                }
                
                return grid;
            }

            // Usage in your existing code:
            var gridMaterial = new THREE.LineBasicMaterial({color: 0xffffff, transparent: true, opacity: 0.5}); // White color
            var grid = createGrid(gridMaterial, 2.1); 

            // Rotate the grid by 90 degrees around the x-axis
            grid.rotation.x = Math.PI / 2;

            scene.add(grid);



            function latLongToCartesian(lat, lon, radius) 
            {
                // Convert latitude and longitude from degrees to radians
                var latRad = THREE.MathUtils.degToRad(lat);
                var lonRad = THREE.MathUtils.degToRad(lon);
                
                // Calculate Cartesian coordinates
                var x = radius * Math.cos(latRad) * Math.cos(lonRad);
                var y = radius * Math.cos(latRad) * Math.sin(lonRad);
                var z = radius * Math.sin(latRad);
                
                return new THREE.Vector3(x, y, z);
            }

            



            let rotationEnabled = false;

            function toggleRotation() {
                rotationEnabled = !rotationEnabled; // Toggle rotation state
                
                if (rotationEnabled) {
                    // Start rotation
                    animateMoonRotation();
                }
            }


            
            const toggleButton = document.getElementById('retate_button');
            toggleButton.addEventListener('click', toggleRotation);

            function animateMoonRotation() {
                if (!rotationEnabled) {
                    return; 
                }
                const speed = 0.01; 
                moon.rotation.y += speed; 
                
                renderer.render(scene, camera); 
                
                requestAnimationFrame(animateMoonRotation);
            }


            const reset_volume_control = document.getElementById('reset_volume_control');
            reset_volume_control.addEventListener('click', reset_volume_controle);

            function reset_volume_controle(){             
                    const sliderValue = parseFloat(50);
                    light.position.setX(-100 + sliderValue);
                    Directional_Light.innerText = sliderValue;
                    renderer.render(scene, camera);
                    volumeControl.value=50;
            }


            const loader = new THREE.TextureLoader();
            const iconTexture = loader.load('images/pointeur-de-localisation.png');
            const iconMaterial = new THREE.SpriteMaterial({ map: iconTexture });
            const iconSprite = new THREE.Sprite(iconMaterial);
            iconSprite.scale.set(0.4, 0.4, 1); // Adjust the size as needed

            // Get Cartesian coordinates from latitude and longitude
            const cartesianCoords = latLongToCartesian(0.67416, 23.473146, 2.1);

            // Position the icon using the Cartesian coordinates
            iconSprite.position.set(cartesianCoords.x, cartesianCoords.y, cartesianCoords.z);
            scene.add(iconSprite);

            // Sample CSV data (replace with your CSV data)
const csvData = "";

// Parse the CSV data into an array of objects
const dataRows = csvData.split('\n');
const data = dataRows.slice(1).map((row) => {
  const [name, longitude, latitude] = row.split(',');
  return {
    name: name.trim(),
    longitude: parseFloat(longitude),
    latitude: parseFloat(latitude),
  };
});







                });
            });
        });
    });
});
    
    </script>
    </body>
</html>
